/*
 *  Copyright (c) 2014, Parse, LLC. All rights reserved.
 *
 *  You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
 *  copy, modify, and distribute this software in source code or binary form for use
 *  in connection with the web services and APIs provided by Parse.
 *
 *  As with any software that integrates with the Parse platform, your use of
 *  this software is subject to the Parse Terms of Service
 *  [https://www.parse.com/about/terms]. This copyright notice shall be
 *  included in all copies or substantial portions of the software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 *  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 *  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 *  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import com.android.builder.core.BuilderConstants

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'com.android.library'

version = '0.0.2'
group = 'com.parse'

ext {
     projName = 'ParseUI-Widget-Android'
     projArtifact = 'parseui-widget-android'
     projDescription = 'A library contains ui widgets for building apps with the Parse Android SDK.'
     projGitLink = 'https://github.com/parse-community/ParseUI-Android'
}

dependencies {
    compile 'com.parse:parse-android:1.15.1'

    androidTestCompile 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile ('org.skyscreamer:jsonassert:1.2.3') {
        exclude module: 'json'
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    def javadocTask = task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        options.links("http://boltsframework.github.io/docs/android/")

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        exclude '**/internal/**'
        exclude '**/oauth/**'
    }

    def javadocJarTask = task("javadocJar${variant.name.capitalize()}", type: Jar, dependsOn: "javadoc${variant.name.capitalize()}") {
        classifier = 'javadoc'
        from javadocTask.destinationDir
    }

    if (name.equals(BuilderConstants.RELEASE)) {
        artifacts.add('archives', javadocJarTask);
    }
}

//region Maven

apply plugin: 'maven'
apply plugin: 'signing'

def isSnapshot = version.endsWith('-SNAPSHOT')
def ossrhUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : System.getenv('CI_NEXUS_USERNAME')
def ossrhPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : System.getenv('CI_NEXUS_PASSWORD')

def pomConfig = {
    scm {
        connection 'scm:git@github.com:parse-community/ParseUI-Android.git'
        developerConnection 'scm:git@github.com:parse-community/ParseUI-Android.git'
        url 'https://github.com/parse-community/ParseUI-Android'
    }

    licenses {
        license {
            name 'Platform License'
            url 'https://github.com/parse-community/ParseUI-Android/blob/master/LICENSE'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'parse'
            name 'Parse'
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

       def basePom = {
            name 'ParseUI-Widget-Android'
            artifactId = 'parseui-widget-android'
            packaging 'aar'
            description 'A library contains ui widgets for building apps with the Parse Android SDK.'
            url 'https://github.com/parse-community/ParseUI-Android'
       }

       pom.project basePom << pomConfig
    }
}

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}

//endregion

apply plugin: 'com.jfrog.bintray'

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    publications = ["MyPublication"]

    publish = true
    pkg {
        repo = 'maven'
        name = 'ParseUI-Android'
        userOrg = 'parse'
        licenses = ['BSD']
        vcsUrl = projGitLink
        version {
            name = project.version
            desc = projDescription
            released = new Date()
            vcsTag = project.version

            // Sonatype username/passwrod must be set for this operation to happen
            mavenCentralSync {
              sync = true
              user = ossrhUsername
              password = ossrhPassword
              close = '1' // release automatically
           }
        }
    }
}

// Create the publication with the pom configuration:
apply plugin: 'maven-publish'

publishing {
    publications {
        MyPublication(MavenPublication) {
            groupId group
            artifactId projArtifact
            artifacts = [androidSourcesJar, bundleRelease]
            version version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', projDescription)
                root.appendNode('name', projName)
                root.appendNode('url', projGitLink)
                root.children().last() + pomConfig

                // maven-publish workaround to include dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                     dependencyNode.appendNode('groupId', it.group)
                     dependencyNode.appendNode('artifactId', it.name)
                     dependencyNode.appendNode('version', it.version)
                }

            }
        }
    }
}

// End of Bintray plugin
